//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        string Login(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Login", ReplyAction="http://tempuri.org/IService/LoginResponse")]
        System.Threading.Tasks.Task<string> LoginAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        void Register(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/Register", ReplyAction="http://tempuri.org/IService/RegisterResponse")]
        System.Threading.Tasks.Task RegisterAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAvailableGames", ReplyAction="http://tempuri.org/IService/GetAvailableGamesResponse")]
        ServiceLibrary.Models.Game[] GetAvailableGames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/GetAvailableGames", ReplyAction="http://tempuri.org/IService/GetAvailableGamesResponse")]
        System.Threading.Tasks.Task<ServiceLibrary.Models.Game[]> GetAvailableGamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/JoinGame", ReplyAction="http://tempuri.org/IService/JoinGameResponse")]
        void JoinGame(int id, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/JoinGame", ReplyAction="http://tempuri.org/IService/JoinGameResponse")]
        System.Threading.Tasks.Task JoinGameAsync(int id, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LeaveGame", ReplyAction="http://tempuri.org/IService/LeaveGameResponse")]
        void LeaveGame(int id, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/LeaveGame", ReplyAction="http://tempuri.org/IService/LeaveGameResponse")]
        System.Threading.Tasks.Task LeaveGameAsync(int id, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateNewGame", ReplyAction="http://tempuri.org/IService/CreateNewGameResponse")]
        void CreateNewGame(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService/CreateNewGame", ReplyAction="http://tempuri.org/IService/CreateNewGameResponse")]
        System.Threading.Tasks.Task CreateNewGameAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Client.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Client.ServiceReference1.IService>, Client.ServiceReference1.IService {
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Login(string username, string password) {
            return base.Channel.Login(username, password);
        }
        
        public System.Threading.Tasks.Task<string> LoginAsync(string username, string password) {
            return base.Channel.LoginAsync(username, password);
        }
        
        public void Register(string username, string password) {
            base.Channel.Register(username, password);
        }
        
        public System.Threading.Tasks.Task RegisterAsync(string username, string password) {
            return base.Channel.RegisterAsync(username, password);
        }
        
        public ServiceLibrary.Models.Game[] GetAvailableGames() {
            return base.Channel.GetAvailableGames();
        }
        
        public System.Threading.Tasks.Task<ServiceLibrary.Models.Game[]> GetAvailableGamesAsync() {
            return base.Channel.GetAvailableGamesAsync();
        }
        
        public void JoinGame(int id, string username) {
            base.Channel.JoinGame(id, username);
        }
        
        public System.Threading.Tasks.Task JoinGameAsync(int id, string username) {
            return base.Channel.JoinGameAsync(id, username);
        }
        
        public void LeaveGame(int id, string username) {
            base.Channel.LeaveGame(id, username);
        }
        
        public System.Threading.Tasks.Task LeaveGameAsync(int id, string username) {
            return base.Channel.LeaveGameAsync(id, username);
        }
        
        public void CreateNewGame(string username) {
            base.Channel.CreateNewGame(username);
        }
        
        public System.Threading.Tasks.Task CreateNewGameAsync(string username) {
            return base.Channel.CreateNewGameAsync(username);
        }
    }
}
